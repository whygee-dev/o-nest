generator client {
  provider = "prisma-client-js"
  previewFeatures = ["interactiveTransactions", "fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int              @id @default(autoincrement())
  email    String           @unique
  fullname String?
  password String           
  profile  Profile?
  posts    Post[]
  animals  Animal[]
}

model Profile {
  id          Int           @id  @default(autoincrement())
  user        User          @relation(fields: [userId], references: [id])
  userId      Int           @unique
  city        City          @relation(fields: [cityId], references: [id])
  cityId      Int
  phoneNumber String       
  address     Address       @relation(fields: [addressId], references: [id])
  addressId   Int
  profession  String
  bio         String
}

model Post {
  id          Int           @id @default(autoincrement())
  description String
  price       Float
  createdAt   DateTime      @default(now())
  startDate   DateTime
  endDate     DateTime
  user        User          @relation(fields: [userId], references: [id])
  userId      Int
  city        City          @relation(fields: [cityId], references: [id])
  cityId      Int
  address     Address       @relation(fields: [addressId], references: [id])
  addressId   Int
  animal      Animal        @relation(fields: [animalId], references: [id])
  animalId    Int
}

model Address {
  id          Int           @id @default(autoincrement())
  text        String
  profile     Profile[]
  post        Post[]
  x           Float 
  y           Float
}

enum AnimalType {
  CAT
  DOG
}

model Animal {
  id      Int               @id @default(autoincrement())
  name    String
  age     Int
  type    AnimalType
  bio     String
  photos  String[]
  owner   User?              @relation(fields: [ownerId], references: [id])
  ownerId Int?
  posts   Post[]
}

model City {
  id        Int             @id @default(autoincrement())
  code      Int             @unique()
  name      String
  x         Float
  y         Float
  posts     Post[]
  users     Profile[]
}
